{"version":3,"sources":["App.module.scss","lib/helpers.js","components/Button/Button.js","db/firebase.js","secret.js","db/controlLights.js","hooks/useIkeaComponent.js","components/lights/Light.js","components/lights/LightPanel.js","components/outlets/Outlet.js","App.js","serviceWorker.js","index.js","components/Button/Button.module.scss"],"names":["module","exports","cn","classes","join","Button","children","onClick","on","className","styles","button","inner","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","lightRef","collection","getLights","Promise","resolve","reject","get","then","querySnapshot","docs","map","doc","id","data","catch","error","useIkeaComponent","componentRef","useState","setOn","useEffect","onSnapshot","update","Light","light","toggle","LightPanel","lights","setLights","console","key","Outlet","App","app","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,mB,mNCDlBC,EAAK,WAAiB,IAAD,uBAAZC,EAAY,yBAAZA,EAAY,gBACzB,OAAOA,EAAQC,KAAK,MCoBPC,EAhBA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GACnC,OACE,4BACED,QAASA,EACTE,UAAWP,EAAGQ,IAAOC,OAAQH,EAAKE,IAAOF,GAAK,KAE9C,yBAAKC,UAAWC,IAAOE,OAAQN,K,6BCNrCO,IAASC,cCHc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CDFT,IAEeC,EAFJT,IAASU,Y,QELdC,EAAWF,EAAGG,WAAW,UA2BzBC,EAAY,IAAIC,SAAQ,SAACC,EAASC,GACtCL,EACGM,MACAC,MAAK,SAAAC,GAAa,OACjBJ,EACEI,EAAcC,KAAKC,KAAI,SAAAC,GAAG,oBACxBC,GAAID,EAAIC,IACLD,EAAIE,eAIZC,OAAM,SAAAC,GAAK,OAAIV,EAAOU,SCvBZC,EAdU,SAAAC,GAAiB,IAAD,EACnBC,oBAAS,GADU,mBAChClC,EADgC,KAC5BmC,EAD4B,KAGvCC,qBAAU,WACRH,EAAaI,YAAW,SAAAV,GAAG,OAAIQ,EAAMR,EAAIE,OAAO7B,SAC/C,IAMH,MAAO,CAACA,EAJO,WACbiC,EAAaK,OAAO,CAAEtC,IAAKA,OCMhBuC,EAXD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTxB,EAAWF,EAAGG,WAAW,UAAUU,IAAIa,EAAMZ,IADxB,EAENI,EAAiBhB,GAFX,mBAEpBhB,EAFoB,KAEhByC,EAFgB,KAI3B,OACE,kBAAC,EAAD,CAAQzC,GAAIA,EAAID,QAAS0C,GACtBD,EAAMZ,KCIEc,EAXI,WAAO,IAAD,EACKR,mBAAS,IADd,mBAChBS,EADgB,KACRC,EADQ,KAQvB,OANAR,qBAAU,WACRlB,EACGK,MAAK,SAAAoB,GAAM,OAAIC,EAAUD,MACzBb,OAAM,SAAAC,GAAK,OAAIc,QAAQd,MAAMA,SAG3BY,EAAOjB,KAAI,SAAAc,GAAK,OAAI,kBAAC,EAAD,CAAOA,MAAOA,EAAOM,IAAKN,EAAMZ,SCE9CmB,EAVA,WAAO,IAAD,EACEf,EAAiBlB,EAAGG,WAAW,WAAWU,IAAI,UADhD,mBACZ3B,EADY,KACRyC,EADQ,KAGnB,OACE,kBAAC,EAAD,CAAQzC,GAAIA,EAAID,QAAS0C,GAAzB,Q,iBCMWO,MATf,WACE,OACE,0BAAM/C,UAAWC,IAAO+C,KACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,iB,kBEpInBvE,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,GAAK,sB","file":"static/js/main.e17589af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","const cn = (...classes) => {\n  return classes.join(\" \");\n};\n\nexport { cn };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Button.module.scss';\nimport { cn } from '../../lib/helpers';\n\nconst Button = ({ children, onClick, on }) => {\n  return (\n    <button\n      onClick={onClick}\n      className={cn(styles.button, on ? styles.on : '')}\n    >\n      <div className={styles.inner}>{children}</div>\n    </button>\n  );\n};\n\nButton.propTypes = {\n  children: PropTypes.any.isRequired,\n  onClick: PropTypes.func\n};\n\nexport default Button;\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nimport { firebaseConfig } from '../secret';\n\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\n\nexport default db;\n","// Don't push this to github\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBntmxgqKrCouVFE1AsYWOjd8tpdyZyXO8',\n  authDomain: 'aslaksmartsgate.firebaseapp.com',\n  databaseURL: 'https://aslaksmartsgate.firebaseio.com',\n  projectId: 'aslaksmartsgate',\n  storageBucket: 'aslaksmartsgate.appspot.com',\n  messagingSenderId: '570064886462',\n  appId: '1:570064886462:web:ee23fec0073beb0e055cef'\n};\n\nexport { firebaseConfig };\n","import db from './firebase';\n\nconst lightRef = db.collection('lights');\n\nconst toggleLight = (lightId, newState) => {\n  lightRef\n    .doc(lightId)\n    .update({ on: newState })\n    .then(() => {\n      console.log(`Switched ${lightId} ${newState ? 'on' : 'off'}`);\n    })\n    .catch(error => console.error(error));\n};\n\nconst getLightState = identifier => {\n  let result = false;\n  db.collection('lights')\n    .doc(identifier)\n    .get()\n    .then(doc => {\n      if (doc.exists) {\n        result = doc.data();\n      } else {\n        // doc.data() will be undefined in this case\n        console.log('No such document!');\n      }\n    });\n};\n\nconst getLights = new Promise((resolve, reject) => {\n  lightRef\n    .get()\n    .then(querySnapshot =>\n      resolve(\n        querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }))\n      )\n    )\n    .catch(error => reject(error));\n});\n\nexport { toggleLight, getLightState, getLights };\n","import { useState, useEffect } from 'react';\nimport db from '../db/firebase';\n\nconst useIkeaComponent = componentRef => {\n  const [on, setOn] = useState(false);\n\n  useEffect(() => {\n    componentRef.onSnapshot(doc => setOn(doc.data().on));\n  }, []);\n\n  const toggle = () => {\n    componentRef.update({ on: !on });\n  };\n\n  return [on, toggle];\n};\n\nexport default useIkeaComponent;\n","import React, { useEffect, useState } from 'react';\nimport Button from '../Button/Button';\nimport db from '../../db/firebase';\nimport { toggleLight } from '../../db/controlLights';\nimport useIkeaComponent from '../../hooks/useIkeaComponent';\n\nconst Light = ({ light }) => {\n  const lightRef = db.collection('lights').doc(light.id);\n  const [on, toggle] = useIkeaComponent(lightRef);\n\n  return (\n    <Button on={on} onClick={toggle}>\n      {light.id}\n    </Button>\n  );\n};\n\nexport default Light;\n","import React, { useEffect, useState } from 'react';\nimport db from '../../db/firebase';\nimport { getLights } from '../../db/controlLights';\nimport Light from './Light';\n\nconst LightPanel = () => {\n  const [lights, setLights] = useState([]);\n  useEffect(() => {\n    getLights\n      .then(lights => setLights(lights))\n      .catch(error => console.error(error));\n  });\n\n  return lights.map(light => <Light light={light} key={light.id} />);\n};\n\nexport default LightPanel;\n","import React, { useEffect } from 'react';\nimport useIkeaComponent from '../../hooks/useIkeaComponent';\nimport Button from '../Button/Button';\nimport db from '../../db/firebase';\n\nconst Outlet = () => {\n  const [on, toggle] = useIkeaComponent(db.collection('outlets').doc('65539'));\n\n  return (\n    <Button on={on} onClick={toggle}>\n      Ovn\n    </Button>\n  );\n};\n\nexport default Outlet;\n","import React from 'react';\nimport Button from './components/Button/Button';\nimport LightPanel from './components/lights/LightPanel';\nimport Outlet from './components/outlets/Outlet';\nimport styles from './App.module.scss';\n\nfunction App() {\n  return (\n    <main className={styles.app}>\n      <LightPanel />\n      <Outlet />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./styles/variables.scss\";\nimport \"./styles/global.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\",\"inner\":\"Button_inner__zNO9j\",\"on\":\"Button_on__1f7Xk\"};"],"sourceRoot":""}